#include <iostream>
#include <cstdlib> // Include the header for rand()
#include <ctime> //to call time for random
using namespace std;

//creating functions for gameplay of tictactoee
char board[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};

bool isBoardFull() {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ')
                return false;  //The purpose of this function is to iterate through every cell in the 3x3 board array  
        }						//and check if any cell contains an empty space
    }
    return true;
}

void displayBoard() {
    cout << "-------------" << endl;  // prints a horizontal line to represent the top of the board.
    for (int i = 0; i < 3; ++i) {
        cout << "| ";  //prints the leftmost vertical bar at the start of each row.
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | "; //prints vertical bar to separate the cells.
        }
        cout << endl; 
        cout << "-------------" << endl; // prints a horizontal line to represent the bottom of the board.
    }
}

bool checkWin(char symbol) {
    for (int i = 0; i < 3; ++i) {
        if ((board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol) ||
            (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol))
            return true; //If any row or column contains three consecutive cells filled with the specified symbol, 
            		 		//it indicates a win, and the function returns true.
    }

    if ((board[0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol) ||
        (board[0][2] == symbol && board[1][1] == symbol && board[2][0] == symbol))
        return true;  //same logic but for diagnols

    return false; //no win with any consecutive cells then returnhs false 
}

void playerMove(char symbol) {
    int row, col;
    while (true) {
        if (symbol == 'X') {
            cout << "Player '" << symbol << "', enter your move (row and column): "; //input their move by specifying the 
            cin >> row >> col;														//row and column where they want to place their 'X'.
        } else {
         
            row = rand() % 3;    // AI's random move using rand()function which is called from cstdlib
            col = rand() % 3;
        }

        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') { //the function checks if the move is valid.
            cout << "Invalid move. Try again." << endl; //invalud then prompts error messg
        } else {
            board[row][col] = symbol; // if move is valid it updates the game board
            break;
        }
    }
}

int main() { //starting body for our program 
    srand(static_cast<unsigned int>(time(0)));   //ensuring that the random numbers generated by rand() are different across different program executions.
    											//use the result of a call to time(0) as the seed	
    											//the value of seed changes with time. So every time we run the program,
												// a new set of random numbers is generated.
	
	cout << "Welcome to Tic-Tac-Toe against AI!"<< endl;
    char currentPlayer = 'X'; //welcoming message 

    while (true) {  //This loop represents the main game loop, The loop keeps woking until there's a winner or the board is full.
        displayBoard(); //calling displayBoard function we made 
        playerMove(currentPlayer); //calling player move 

        if (checkWin(currentPlayer)) { //checks if the current player has won the game.
            displayBoard();
            if (currentPlayer == 'X') { 
                cout << "Player 'X' wins! Congratulations!" << endl; // if curent player is X then outputs this 
            } else {
                cout << "AI wins! Better luck next time!" << endl; //if currewnt player is AI then outputs this
            }
            break; //break out of loop
        }

        if (isBoardFull()) { //checks if the board is full
            displayBoard(); 
            cout << "It's a draw! Game over." << endl;
            break; //break out of loop
        }

        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X'; // Switching player
    }

    return 0;
}
